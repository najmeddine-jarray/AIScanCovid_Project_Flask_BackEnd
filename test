import psycopg2
from flask import Flask, jsonify, request, send_file
from psycopg2 import connect, extras
from cryptography.fernet import Fernet
from os import environ
from dotenv import load_dotenv
from flask_cors import CORS

from flask import render_template, url_for
import requests
import os


# from cgitb import html
from email.mime import image

import os
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img
import cv2
from keras.applications.vgg16 import VGG16


load_dotenv()
app = Flask(__name__)
# cors = CORS(app, resources={r"/*": {"origins": "*"}})
CORS(app)  # Enable CORS for all routes

key = Fernet.generate_key()


host = environ.get('DB_HOST')
database = environ.get('DB_NAME')
username = environ.get('DB_USER')
password = environ.get('DB_PASSWORD')
port = environ.get('DB_PORT')

# Auth database postgresql


def get_db_connection():
    conn = connect(host='localhost',
                   database='scancovid',
                   user='postgres',
                   password='password',
                   port=5432)

    return conn


@app.route('/login', methods=['POST'])
def login():
    data = request.json
    email = data['email']
    password = data['password']
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=extras.RealDictCursor)
    cur.execute("SELECT * FROM admin_login")
    users = cur.fetchall()
    for user in users:
        if user['email'] == email and user['password'] == password:
            return jsonify({'message': 'Login Successful. '}),  200
    return jsonify({'message': 'Email Not already exists in the database. '}), 400


@app.route('/get', methods=['GET'])
def get_users():
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=extras.RealDictCursor)
        query = "SELECT * FROM scanner_patients"
        cur.execute(query)
        users = cur.fetchall()
        cur.close()
        conn.close()
        if not users:
            return jsonify({'message': 'No users found'}), 404
        return jsonify(users)
    except Exception as e:
        return jsonify({'message': str(e)}), 500


model = load_model('covid_prediction.h5')


@app.route('/scanner', methods=['POST', 'GET'])
def scanner():
    try:
        new_user = request.get_json()
        firstname = new_user['firstname']
        lastname = new_user['lastname']
        phonenumber = new_user['phonenumber']
        cin = new_user['cin']
        birth = new_user['birth']
        im = new_user['xray']
        # img_bytes = base64.b64decode(imgscan)import base64

        im.save('./static/images/{}'.format(im.filename))
        im = cv2.imread('./static/images/{}'.format(im.filename))
        im = np.asarray(im)
        ima = cv2.resize(im, (160, 160))
        ima = ima.reshape(1, 160, 160, 3)
        # im = load_img(im, target_size=(160, 160))
        # im = np.expand_dims(im, axis=0)
        prediction = model.predict(ima)
        class_predictions = np.argmax(prediction, axis=1)
        if class_predictions == 0:
            result = 'Covid'
        elif class_predictions == 1:
            result = 'Normal'
        elif class_predictions == 2:
            result = 'Viral Pneumonia'
        message = result
        conn = get_db_connection()
        with conn:
            cur = con.cursor()
            cur.execute("INSERT INTO scanner_patients (firstname,lastname,cin,phonenumber,birth,result) VALUES (%s, %s, %s, %s, %s, %s) RETURNING *",
                        (firstname, lastname, cin, phonenumber, birth, message))
            new_user = cur.fetchone()
            conn.commit()

            print('added successfully to database !! ')

            return jsonify(result=message), 201

    except KeyError as e:
        print(f"Error processing request: {e}")
        message = "Missing required field"
        return jsonify(error=message), 400  # use 400 for bad requests
    except Exception as e:
        print(f"Error processing image: {e}")
        message = "Error processing image"
        # use 500 for internal server errors
        return jsonify(error=message), 500


@app.route('/', methods=['GET'])
def home():

    return jsonify('AI ScanCovid Server Application')
